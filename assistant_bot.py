import logging
import requests
from datetime import datetime
from telegram import ForceReply, Update 
from telegram.ext import Application, CommandHandler, ContextTypes, MessageHandler, filters
from config import BOT_TOKEN
import xml.etree.ElementTree as ET

# –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
logging.basicConfig(
    format="%(asctime)s - %(name)s - %(levelname)s - %(message)s", level=logging.INFO
)
logger = logging.getLogger(__name__)

# –ö–æ–º–∞–Ω–¥—ã

# /start
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    user = update.effective_user
    await update.message.reply_html(
        rf"üëã –ü—Ä–∏–≤–µ—Ç, {user.mention_html()}! –Ø —Ç–≤–æ–π –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç üå§Ô∏è\n\n"
        "–Ø –º–æ–≥—É:\n"
        "üóì –ü–ª–∞–Ω–∏—Ä–æ–≤–∞—Ç—å –∑–∞–¥–∞—á–∏\n"
        "üå¶ –ü–æ–∫–∞–∑—ã–≤–∞—Ç—å –ø–æ–≥–æ–¥—É\n"
        "üì∞ –ü—Ä–∏—Å—ã–ª–∞—Ç—å –Ω–æ–≤–æ—Å—Ç–∏\n"
        "üìù –î–µ–ª–∞—Ç—å –∑–∞–º–µ—Ç–∫–∏\n\n"
        "–í–≤–µ–¥–∏ /help, —á—Ç–æ–±—ã —É–∑–Ω–∞—Ç—å –±–æ–ª—å—à–µ."
    )

# /help
async def help_command(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    await update.message.reply_text(
        "üìñ –°–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥:\n"
        "/start ‚Äî –∑–∞–ø—É—Å–∫ –±–æ—Ç–∞\n"
        "/help ‚Äî –ø–æ–º–æ—â—å\n"
        "/weather <–≥–æ—Ä–æ–¥> ‚Äî –ø–æ–≥–æ–¥–∞ –≤ –≥–æ—Ä–æ–¥–µ\n"
        "/note <—Ç–µ–∫—Å—Ç> ‚Äî —Å–æ–∑–¥–∞—Ç—å –∑–∞–º–µ—Ç–∫—É\n"
        "/notes ‚Äî –ø–æ–∫–∞–∑–∞—Ç—å –∑–∞–º–µ—Ç–∫–∏\n"
        "/time ‚Äî —Ç–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è\n"
        "/news ‚Äî –ø–æ—Å–ª–µ–¥–Ω–∏–µ –Ω–æ–≤–æ—Å—Ç–∏"
    )

# –ü–æ–≥–æ–¥–∞
async def weather(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    if len(context.args) == 0:
        await update.message.reply_text("üåÜ –£–∫–∞–∂–∏ –≥–æ—Ä–æ–¥: /weather –ú–æ—Å–∫–≤–∞")
        return
    city = " ".join(context.args)
    api_key = "https://wttr.in/{}?format=3".format(city)
    try:
        res = requests.get(api_key)
        await update.message.reply_text(f"‚òÄÔ∏è {res.text}")
    except Exception:
        await update.message.reply_text("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –æ –ø–æ–≥–æ–¥–µ.")

# –ó–∞–º–µ—Ç–∫–∏
notes = {}

async def note_add(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    user_id = update.effective_user.id
    text = " ".join(context.args)
    if not text:
        await update.message.reply_text("‚úçÔ∏è –ù–∞–ø–∏—à–∏ –∑–∞–º–µ—Ç–∫—É –ø–æ—Å–ª–µ –∫–æ–º–∞–Ω–¥—ã: /note –∫—É–ø–∏—Ç—å —Ö–ª–µ–±")
        return
    notes.setdefault(user_id, []).append(text)
    await update.message.reply_text("‚úÖ –ó–∞–º–µ—Ç–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∞!")

async def show_notes(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    user_id = update.effective_user.id
    user_notes = notes.get(user_id, [])
    if not user_notes:
        await update.message.reply_text("üì≠ –£ —Ç–µ–±—è –ø–æ–∫–∞ –Ω–µ—Ç –∑–∞–º–µ—Ç–æ–∫.")
    else:
        msg = "\n".join(f"{i+1}. {n}" for i, n in enumerate(user_notes))
        await update.message.reply_text(f"üìù –¢–≤–æ–∏ –∑–∞–º–µ—Ç–∫–∏:\n{msg}")

# –í—Ä–µ–º—è
async def time_now(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    now = datetime.now().strftime("%H:%M:%S, %d.%m.%Y")
    await update.message.reply_text(f"üïì –¢–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è: {now}")

# –ù–æ–≤–æ—Å—Ç–∏
async def news(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–ü–æ–ª—É—á–∞–µ—Ç –ø–æ—Å–ª–µ–¥–Ω–∏–µ –Ω–æ–≤–æ—Å—Ç–∏ —Å ria.ru"""
    try:
        url = "https://ria.ru/export/rss2/index.xml"
        response = requests.get(url)
        response.encoding = 'utf-8'

        # –†–∞–∑–±–∏—Ä–∞–µ–º XML
        root = ET.fromstring(response.text)
        items = root.findall(".//item")

        # –ë–µ—Ä—ë–º –ø–µ—Ä–≤—ã–µ 5 –Ω–æ–≤–æ—Å—Ç–µ–π
        headlines = []
        for item in items[:5]:
            title = item.find("title").text
            link = item.find("link").text
            headlines.append(f"üì∞ {title}\nüîó {link}")

        msg = "\n\n".join(headlines)
        await update.message.reply_text(msg)

    except Exception as e:
        print(e)
        await update.message.reply_text("‚ö†Ô∏è –ù–æ–≤–æ—Å—Ç–∏ –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã. –ü–æ–ø—Ä–æ–±—É–π –ø–æ–∑–∂–µ.")

# –≠—Ö–æ (–æ–±—â–µ–Ω–∏–µ)
async def echo(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    await update.message.reply_text(f"–¢—ã —Å–∫–∞–∑–∞–ª: {update.message.text}")

# –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è
def main() -> None:
    app = Application.builder().token(BOT_TOKEN).build()

    # –ö–æ–º–∞–Ω–¥—ã
    app.add_handler(CommandHandler("start", start))
    app.add_handler(CommandHandler("help", help_command))
    app.add_handler(CommandHandler("weather", weather))
    app.add_handler(CommandHandler("note", note_add))
    app.add_handler(CommandHandler("notes", show_notes))
    app.add_handler(CommandHandler("time", time_now))
    app.add_handler(CommandHandler("news", news))

    # –≠—Ö–æ-—Å–æ–æ–±—â–µ–Ω–∏—è
    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, echo))

    # –ó–∞–ø—É—Å–∫
    app.run_polling(allowed_updates=Update.ALL_TYPES)

if __name__ == "__main__":
    main()
